/**
 * Script de Debug Avan√ßado para Transfer√™ncias zkSync Era
 * Para rodar no console do navegador ap√≥s conectar a wallet
 * 
 * Como usar:
 * 1. Abra o console do navegador (F12)
 * 2. Cole e execute este script
 * 3. Chame: debugTransferEOA()
 */

window.debugTransferEOA = async function() {
  console.log('üîç === DEBUG AVAN√áADO - TRANSFER√äNCIAS ZKSYNC ERA ===');
  
  try {
    // Verificar se MetaMask est√° dispon√≠vel
    if (!window.ethereum) {
      console.error('‚ùå MetaMask n√£o encontrado');
      return;
    }

    // Configura√ß√µes
    const DESTINATION_ADDRESS = '0xa3d5737c037981F02275eD1f4a1dde3b3577355c';
    const TEST_AMOUNT = '0.0001'; // 0.0001 ETH
    const ZKSYNC_SEPOLIA_CHAIN_ID = 300;

    // Inicializar provider
    const provider = new ethers.BrowserProvider(window.ethereum);
    const network = await provider.getNetwork();
    
    console.log('üåê Rede atual:', {
      name: network.name,
      chainId: network.chainId.toString(),
      esperado: ZKSYNC_SEPOLIA_CHAIN_ID
    });

    if (Number(network.chainId) !== ZKSYNC_SEPOLIA_CHAIN_ID) {
      console.error('‚ùå Conecte-se √† zkSync Sepolia (Chain ID: 300)');
      return;
    }

    // Obter signer
    const signer = await provider.getSigner();
    const userAddress = await signer.getAddress();
    
    console.log('üë§ Endere√ßo do usu√°rio:', userAddress);
    console.log('üè¶ Endere√ßo de destino:', DESTINATION_ADDRESS);

    // Verificar saldos iniciais
    const balanceUser = await provider.getBalance(userAddress);
    const balanceDestination = await provider.getBalance(DESTINATION_ADDRESS);
    
    console.log('üí∞ Saldos INICIAIS:', {
      usuario: {
        address: userAddress,
        balance: ethers.formatEther(balanceUser) + ' ETH'
      },
      destino: {
        address: DESTINATION_ADDRESS,
        balance: ethers.formatEther(balanceDestination) + ' ETH'
      }
    });

    // Verificar ativa√ß√£o das contas
    console.log('üîç Verificando ativa√ß√£o das contas...');
    
    const userNonce = await provider.getTransactionCount(userAddress);
    const userCode = await provider.getCode(userAddress);
    const destNonce = await provider.getTransactionCount(DESTINATION_ADDRESS);
    const destCode = await provider.getCode(DESTINATION_ADDRESS);
    
    console.log('üìä Status das contas:', {
      usuario: {
        nonce: userNonce,
        hasCode: userCode !== '0x',
        isEOA: userCode === '0x',
        isActivated: userNonce > 0 || balanceUser > 0
      },
      destino: {
        nonce: destNonce,
        hasCode: destCode !== '0x',
        isEOA: destCode === '0x',
        isActivated: destNonce > 0 || balanceDestination > 0
      }
    });

    // Confirmar com o usu√°rio
    const proceed = confirm(`Enviar ${TEST_AMOUNT} ETH para ${DESTINATION_ADDRESS}?\n\nIsto √© uma transa√ß√£o REAL na testnet!`);
    if (!proceed) {
      console.log('‚ùå Opera√ß√£o cancelada pelo usu√°rio');
      return;
    }

    // Preparar transa√ß√£o
    const tx = {
      to: DESTINATION_ADDRESS,
      value: ethers.parseEther(TEST_AMOUNT),
      gasLimit: BigInt(100000),
      type: 2 // EIP-1559
    };

    console.log('üì§ Enviando transa√ß√£o de teste...', tx);

    // Enviar transa√ß√£o
    const txResponse = await signer.sendTransaction(tx);
    console.log('‚úÖ Transa√ß√£o enviada:', {
      hash: txResponse.hash,
      explorerLink: `https://sepolia.explorer.zksync.io/tx/${txResponse.hash}`
    });

    // Aguardar confirma√ß√£o
    console.log('‚è≥ Aguardando confirma√ß√£o...');
    const receipt = await txResponse.wait();
    
    console.log('üéâ Transa√ß√£o confirmada:', {
      hash: receipt.hash,
      blockNumber: receipt.blockNumber,
      gasUsed: receipt.gasUsed.toString(),
      status: receipt.status === 1 ? 'Sucesso' : 'Falha'
    });

    // Aguardar sincroniza√ß√£o
    console.log('‚è≥ Aguardando sincroniza√ß√£o da rede...');
    await new Promise(resolve => setTimeout(resolve, 10000));

    // Verificar saldos finais
    const finalBalanceUser = await provider.getBalance(userAddress);
    const finalBalanceDestination = await provider.getBalance(DESTINATION_ADDRESS);
    
    console.log('üí∞ Saldos FINAIS:', {
      usuario: {
        address: userAddress,
        balance: ethers.formatEther(finalBalanceUser) + ' ETH',
        diferenca: ethers.formatEther(balanceUser - finalBalanceUser) + ' ETH'
      },
      destino: {
        address: DESTINATION_ADDRESS,
        balance: ethers.formatEther(finalBalanceDestination) + ' ETH',
        diferenca: ethers.formatEther(finalBalanceDestination - balanceDestination) + ' ETH'
      }
    });

    // An√°lise da transfer√™ncia
    const expectedTransfer = ethers.parseEther(TEST_AMOUNT);
    const actualTransfer = finalBalanceDestination - balanceDestination;
    
    console.log('üìä AN√ÅLISE DA TRANSFER√äNCIA:', {
      esperado: ethers.formatEther(expectedTransfer) + ' ETH',
      recebido: ethers.formatEther(actualTransfer) + ' ETH',
      sucesso: actualTransfer === expectedTransfer,
      diferenca: ethers.formatEther(expectedTransfer - actualTransfer) + ' ETH'
    });

    if (actualTransfer === expectedTransfer) {
      console.log('‚úÖ SUCESSO: Transfer√™ncia confirmada corretamente!');
    } else if (actualTransfer > 0) {
      console.log('‚ö†Ô∏è PARCIAL: Valor transferido mas com diferen√ßa');
    } else {
      console.log('‚ùå PROBLEMA: Nenhum valor foi transferido para a conta de destino');
      console.log('üîó Verificar manualmente no explorer:', `https://sepolia.explorer.zksync.io/tx/${txResponse.hash}`);
      console.log('üîó Verificar conta de destino:', `https://sepolia.explorer.zksync.io/address/${DESTINATION_ADDRESS}`);
    }

    // Logs para investiga√ß√£o adicional
    console.log('üîç LINKS PARA INVESTIGA√á√ÉO:');
    console.log('Transaction:', `https://sepolia.explorer.zksync.io/tx/${txResponse.hash}`);
    console.log('Sender:', `https://sepolia.explorer.zksync.io/address/${userAddress}`);
    console.log('Receiver:', `https://sepolia.explorer.zksync.io/address/${DESTINATION_ADDRESS}`);

  } catch (error) {
    console.error('‚ùå Erro no debug:', error);
  }
};

console.log('‚úÖ Script de debug carregado! Execute: debugTransferEOA()');
