const { ethers } = require("hardhat");
const { DEPLOYED_CONTRACTS, MARKETPLACE_ABI, ASSETTOKEN_ABI } = require("./connect-deployed-contracts");
require("dotenv").config();

async function listAssetForSale(tokenId, priceInEth) {
    console.log(`üè™ Listando AssetToken ${tokenId} por ${priceInEth} ETH...\n`);

    const [deployer] = await ethers.getSigners();
    const marketplace = new ethers.Contract(DEPLOYED_CONTRACTS.MARKETPLACE, MARKETPLACE_ABI, deployer);
    const assetToken = new ethers.Contract(DEPLOYED_CONTRACTS.ASSETTOKEN, ASSETTOKEN_ABI, deployer);

    try {
        // Verificar se √© o dono do token
        const owner = await assetToken.ownerOf(tokenId);
        if (owner.toLowerCase() !== deployer.address.toLowerCase()) {
            console.error("‚ùå Voc√™ n√£o √© o propriet√°rio deste token");
            return;
        }

        // Verificar aprova√ß√£o
        const approved = await assetToken.getApproved(tokenId);
        if (approved.toLowerCase() !== DEPLOYED_CONTRACTS.MARKETPLACE.toLowerCase()) {
            console.log("üîê Aprovando marketplace para transferir o token...");
            const approveTx = await assetToken.approve(DEPLOYED_CONTRACTS.MARKETPLACE, tokenId);
            await approveTx.wait();
            console.log("‚úÖ Aprova√ß√£o concedida");
        }

        const price = ethers.parseEther(priceInEth.toString());

        // Estimar gas
        const gasEstimate = await marketplace.listAsset.estimateGas(
            DEPLOYED_CONTRACTS.ASSETTOKEN,
            tokenId,
            price
        );

        // Listar no marketplace
        console.log("üöÄ Listando no marketplace...");
        const tx = await marketplace.listAsset(
            DEPLOYED_CONTRACTS.ASSETTOKEN,
            tokenId,
            price,
            {
                gasLimit: gasEstimate + BigInt(20000)
            }
        );

        console.log(`üì• Transa√ß√£o enviada: ${tx.hash}`);
        const receipt = await tx.wait();
        console.log(`‚úÖ Token listado com sucesso!`);
        console.log(`üîó Transa√ß√£o: https://sepolia.era.zksync.dev/tx/${tx.hash}`);

    } catch (error) {
        console.error("‚ùå Erro ao listar token:", error.message);
    }
}

async function buyAsset(tokenId) {
    console.log(`üõí Comprando AssetToken ${tokenId}...\n`);

    const [deployer] = await ethers.getSigners();
    const marketplace = new ethers.Contract(DEPLOYED_CONTRACTS.MARKETPLACE, MARKETPLACE_ABI, deployer);

    try {
        // Verificar listing
        const listing = await marketplace.listings(DEPLOYED_CONTRACTS.ASSETTOKEN, tokenId);
        
        if (!listing.active) {
            console.error("‚ùå Este token n√£o est√° √† venda");
            return;
        }

        console.log(`üí∞ Pre√ßo: ${ethers.formatEther(listing.price)} ETH`);
        console.log(`üë§ Vendedor: ${listing.seller}`);

        // Verificar saldo
        const balance = await ethers.provider.getBalance(deployer.address);
        if (balance < listing.price) {
            console.error("‚ùå Saldo insuficiente");
            return;
        }

        // Comprar
        console.log("üöÄ Executando compra...");
        const tx = await marketplace.buyAsset(
            DEPLOYED_CONTRACTS.ASSETTOKEN,
            tokenId,
            {
                value: listing.price
            }
        );

        console.log(`üì• Transa√ß√£o enviada: ${tx.hash}`);
        const receipt = await tx.wait();
        console.log(`‚úÖ Compra realizada com sucesso!`);
        console.log(`üîó Transa√ß√£o: https://sepolia.era.zksync.dev/tx/${tx.hash}`);

    } catch (error) {
        console.error("‚ùå Erro ao comprar token:", error.message);
    }
}

async function cancelListing(tokenId) {
    console.log(`‚ùå Cancelando listagem do AssetToken ${tokenId}...\n`);

    const [deployer] = await ethers.getSigners();
    const marketplace = new ethers.Contract(DEPLOYED_CONTRACTS.MARKETPLACE, MARKETPLACE_ABI, deployer);

    try {
        const listing = await marketplace.listings(DEPLOYED_CONTRACTS.ASSETTOKEN, tokenId);
        
        if (!listing.active) {
            console.error("‚ùå Este token n√£o est√° listado");
            return;
        }

        if (listing.seller.toLowerCase() !== deployer.address.toLowerCase()) {
            console.error("‚ùå Apenas o vendedor pode cancelar a listagem");
            return;
        }

        console.log("üöÄ Cancelando listagem...");
        const tx = await marketplace.cancelListing(DEPLOYED_CONTRACTS.ASSETTOKEN, tokenId);

        console.log(`üì• Transa√ß√£o enviada: ${tx.hash}`);
        const receipt = await tx.wait();
        console.log(`‚úÖ Listagem cancelada com sucesso!`);
        console.log(`üîó Transa√ß√£o: https://sepolia.era.zksync.dev/tx/${tx.hash}`);

    } catch (error) {
        console.error("‚ùå Erro ao cancelar listagem:", error.message);
    }
}

async function viewListing(tokenId) {
    console.log(`üîç Verificando listagem do AssetToken ${tokenId}...\n`);

    const [deployer] = await ethers.getSigners();
    const marketplace = new ethers.Contract(DEPLOYED_CONTRACTS.MARKETPLACE, MARKETPLACE_ABI, deployer);
    const assetToken = new ethers.Contract(DEPLOYED_CONTRACTS.ASSETTOKEN, ASSETTOKEN_ABI, deployer);

    try {
        const listing = await marketplace.listings(DEPLOYED_CONTRACTS.ASSETTOKEN, tokenId);
        const assetInfo = await assetToken.assetInfo(tokenId);

        console.log("üìã Informa√ß√µes da Listagem:");
        console.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        console.log(`üÜî Token ID: ${tokenId}`);
        console.log(`üè∑Ô∏è  Tipo: ${assetInfo.assetType}`);
        console.log(`üí∞ Pre√ßo: ${listing.active ? ethers.formatEther(listing.price) + " ETH" : "N√£o listado"}`);
        console.log(`üë§ Vendedor: ${listing.seller}`);
        console.log(`üîÑ Status: ${listing.active ? "√Ä venda" : "N√£o dispon√≠vel"}`);
        console.log(`üìç Localiza√ß√£o: ${assetInfo.assetLocation}`);

    } catch (error) {
        console.error("‚ùå Erro ao verificar listagem:", error.message);
    }
}

async function getMarketplaceStats() {
    console.log("üìä Estat√≠sticas do Marketplace...\n");

    const [deployer] = await ethers.getSigners();
    const marketplace = new ethers.Contract(DEPLOYED_CONTRACTS.MARKETPLACE, MARKETPLACE_ABI, deployer);

    try {
        const fee = await marketplace.marketplaceFee();
        console.log("üè™ Informa√ß√µes do Marketplace:");
        console.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        console.log(`üí≥ Taxa: ${fee / 100}%`);
        console.log(`üìç Endere√ßo: ${DEPLOYED_CONTRACTS.MARKETPLACE}`);
        console.log(`üîó zkSync Explorer: https://sepolia.era.zksync.dev/address/${DEPLOYED_CONTRACTS.MARKETPLACE}`);

    } catch (error) {
        console.error("‚ùå Erro ao obter estat√≠sticas:", error.message);
    }
}

async function main() {
    console.log("üè™ Marketplace Manager - zkSync Sepolia");
    console.log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n");

    const args = process.argv.slice(2);
    
    if (args.length === 0) {
        console.log("üìñ Comandos dispon√≠veis:");
        console.log("  npm run market:list <tokenId> <pre√ßo>  - Listar token √† venda");
        console.log("  npm run market:buy <tokenId>           - Comprar token");
        console.log("  npm run market:cancel <tokenId>        - Cancelar listagem");
        console.log("  npm run market:view <tokenId>          - Ver detalhes da listagem");
        console.log("  npm run market:stats                   - Ver estat√≠sticas");
        console.log("\nOu use: node manage-marketplace.js <comando> [par√¢metros]");
        return;
    }

    const command = args[0];

    switch (command) {
        case "list":
            const tokenId = args[1];
            const price = args[2];
            if (!tokenId || !price) {
                console.error("‚ùå Use: list <tokenId> <pre√ßoEmETH>");
                return;
            }
            await listAssetForSale(tokenId, price);
            break;
        
        case "buy":
            const buyTokenId = args[1];
            if (!buyTokenId) {
                console.error("‚ùå Use: buy <tokenId>");
                return;
            }
            await buyAsset(buyTokenId);
            break;
        
        case "cancel":
            const cancelTokenId = args[1];
            if (!cancelTokenId) {
                console.error("‚ùå Use: cancel <tokenId>");
                return;
            }
            await cancelListing(cancelTokenId);
            break;
        
        case "view":
            const viewTokenId = args[1];
            if (!viewTokenId) {
                console.error("‚ùå Use: view <tokenId>");
                return;
            }
            await viewListing(viewTokenId);
            break;
        
        case "stats":
            await getMarketplaceStats();
            break;
        
        default:
            console.error("‚ùå Comando n√£o reconhecido:", command);
    }
}

if (require.main === module) {
    main()
        .then(() => process.exit(0))
        .catch((error) => {
            console.error("‚ùå Erro:", error);
            process.exit(1);
        });
}
