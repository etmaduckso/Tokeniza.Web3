"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { useToast } from "@/components/ui/use-toast";
import { 
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger
} from "@/components/ui/dropdown-menu";
import { useWalletStore } from "@/lib/wallet-store";

export function WalletConnect() {
  const { toast } = useToast();
  const { isConnected, address, walletType, setConnected, setAddress, setWalletType, disconnect } = useWalletStore();

  console.log("üîß WalletConnect montado - Estado atual:", { isConnected, address, walletType });

  // Check for stored wallet connection on component mount
  useEffect(() => {
    console.log("üîÑ useEffect: Verificando conex√£o armazenada...");
    const storedWalletData = localStorage.getItem('walletConnection');
    if (storedWalletData) {
      try {
        const { address, walletType } = JSON.parse(storedWalletData);
        console.log("üì¶ Dados armazenados encontrados:", { address, walletType });
        setAddress(address);
        setWalletType(walletType);
        setConnected(true);
        console.log("‚úÖ Conex√£o restaurada do localStorage");
      } catch (error) {
        console.error("‚ùå Erro ao restaurar dados da carteira:", error);
      }
    } else {
      console.log("üì≠ Nenhuma conex√£o armazenada encontrada");
    }
  }, [setAddress, setConnected, setWalletType]);

  const connectEthereumWallet = async () => {
    console.log("üöÄ Iniciando conex√£o com carteira Ethereum (zkSync Sepolia)...");
    
    try {
      // Verificar se estamos no navegador
      if (typeof window === "undefined") {
        console.error("‚ùå Erro: window n√£o dispon√≠vel");
        toast({
          title: "Erro",
          description: "Funcionalidade n√£o dispon√≠vel no servidor.",
          variant: "destructive",
        });
        return;
      }

      // Priorizar MetaMask nativo sobre outras extens√µes
      let ethereum = window.ethereum;
      
      // Se h√° m√∫ltiplos provedores, priorizar MetaMask nativo
      if ((window.ethereum as any)?.providers) {
        console.log("üîç M√∫ltiplos provedores detectados:", (window.ethereum as any).providers.length);
        
        // Procurar MetaMask nativo (n√£o Uniswap)
        const providers = (window.ethereum as any).providers;
        const metamaskProvider = providers.find(
          (provider: any) => provider.isMetaMask && !provider.isUniswap && !provider.isWalletConnect
        );
        
        if (metamaskProvider) {
          ethereum = metamaskProvider;
          console.log("‚úÖ MetaMask nativo selecionado (prioridade sobre extens√µes)");
        } else {
          // Fallback para qualquer MetaMask
          const anyMetamask = providers.find((provider: any) => provider.isMetaMask);
          if (anyMetamask) {
            ethereum = anyMetamask;
            console.log("‚ö†Ô∏è MetaMask encontrado (pode ser extens√£o de terceiros)");
          }
        }
      } else if (window.ethereum?.isMetaMask) {
        console.log("‚úÖ MetaMask nativo detectado");
      }

      // Verificar se temos um provedor Ethereum
      if (!ethereum) {
        console.error("‚ùå Nenhum provedor Ethereum encontrado");
        toast({
          title: "MetaMask n√£o encontrada",
          description: "Por favor, instale a MetaMask oficial para acessar zkSync Sepolia.",
          variant: "destructive",
        });
        return;
      }

      console.log("‚úÖ Provedor Ethereum configurado para zkSync Sepolia");

      // Mostrar toast inicial espec√≠fico para zkSync
      toast({
        title: "üîó Conectando √† zkSync Sepolia",
        description: "Aguarde aprova√ß√£o no MetaMask para acessar nossa rede de teste",
      });

      console.log("üì± Solicitando conex√£o com zkSync Sepolia...");

      // Solicitar conex√£o com a carteira usando o provedor selecionado
      const accounts = await ethereum.request({
        method: "eth_requestAccounts",
      });

      console.log("üìù Resposta da conex√£o:", accounts?.length > 0 ? `${accounts.length} conta(s) encontrada(s)` : "Nenhuma conta");

      if (!accounts || accounts.length === 0) {
        console.error("‚ùå Nenhuma conta encontrada ap√≥s conex√£o");
        toast({
          title: "Nenhuma conta encontrada",
          description: "Por favor, desbloqueie sua carteira MetaMask.",
          variant: "destructive",
        });
        return;
      }

      const userAccount = accounts[0];
      console.log("üë§ Conta conectada:", userAccount);
      
      // Verificar rede atual
      console.log("üîç Verificando rede atual...");
      const chainId = await ethereum.request({ method: "eth_chainId" });
      const networkId = parseInt(Array.isArray(chainId) ? chainId[0] : chainId, 16);
      console.log(`üåê Rede detectada: ${networkId} (zkSync Sepolia = 300)`);
      
      // Tratar configura√ß√£o de rede
      let networkConfigured = false;
      
      if (networkId === 300) {
        console.log("‚úÖ J√° na rede zkSync Sepolia");
        networkConfigured = true;
      } else {
        console.log("üîÑ Tentando configurar rede zkSync Sepolia...");
        
        // Primeiro tentar trocar
        try {
          console.log("üîÄ Tentando trocar para zkSync Sepolia...");
          await ethereum.request({
            method: "wallet_switchEthereumChain",
            params: [{ chainId: "0x12c" }], // 300 em hex
          });
          console.log("‚úÖ Rede trocada com sucesso");
          networkConfigured = true;
        } catch (switchError: any) {
          console.log("‚ö†Ô∏è Erro ao trocar rede:", switchError.code, switchError.message);
          
          // Se rede n√£o existe, tentar adicionar
          if (switchError.code === 4902) {
            console.log("‚ûï Rede n√£o existe, tentando adicionar...");
            try {
              await ethereum.request({
                method: "wallet_addEthereumChain",
                params: [
                  {
                    chainId: "0x12c",
                    chainName: "zkSync Sepolia Testnet",
                    nativeCurrency: {
                      name: "ETH",
                      symbol: "ETH",
                      decimals: 18,
                    },
                    rpcUrls: ["https://sepolia.era.zksync.dev"],
                    blockExplorerUrls: ["https://sepolia.explorer.zksync.io"],
                  },
                ],
              });
              console.log("‚úÖ Rede zkSync Sepolia adicionada com sucesso");
              networkConfigured = true;
            } catch (addError: any) {
              console.log("‚ö†Ô∏è Erro ao adicionar rede:", addError.code, addError.message);
              
              if (addError.code === 4001) {
                console.log("‚ùå Usu√°rio rejeitou adicionar rede zkSync Sepolia");
                toast({
                  title: "‚ö†Ô∏è Configura√ß√£o de rede rejeitada",
                  description: "Configure a rede zkSync Sepolia manualmente para usar todas as funcionalidades de tokeniza√ß√£o.",
                  variant: "destructive",
                });
              } else if (addError.message?.includes("already exists") || addError.code === -32602) {
                console.log("‚ÑπÔ∏è Rede zkSync Sepolia j√° existe");
                networkConfigured = true;
              }
            }
          } else if (switchError.code === 4001) {
            console.log("‚ùå Usu√°rio rejeitou troca para zkSync Sepolia");
            toast({
              title: "‚ö†Ô∏è Configura√ß√£o de rede rejeitada",
              description: "Para tokenizar ativos, mude para zkSync Sepolia manualmente no MetaMask.",
              variant: "destructive",
            });
          }
        }
      }
      
      console.log("üíæ Salvando dados da conex√£o...");
      
      // Salvar dados da conex√£o independente da rede
      setAddress(userAccount);
      setConnected(true);
      setWalletType("ethereum");
      
      // Armazenar informa√ß√µes de conex√£o no localStorage
      localStorage.setItem('walletConnection', JSON.stringify({
        address: userAccount,
        walletType: 'ethereum'
      }));
      
      console.log("üéâ Conex√£o estabelecida com sucesso!");
      
      // Toast de sucesso diferente dependendo da rede
      if (networkConfigured) {
        toast({
          title: "‚úÖ Conectado √† zkSync Sepolia!",
          description: `MetaMask conectada na rede de teste\n${userAccount.slice(0, 6)}...${userAccount.slice(-4)}`,
        });
      } else {
        toast({
          title: "‚ö†Ô∏è Conectado com aviso",
          description: `MetaMask conectada, mas configure zkSync Sepolia para tokenizar ativos\n${userAccount.slice(0, 6)}...${userAccount.slice(-4)}`,
        });
      }

    } catch (error: any) {
      console.error("üí• Erro detalhado ao conectar carteira:", error);
      console.error("üí• Stack trace:", error.stack);
      console.error("üí• Erro completo:", JSON.stringify(error, null, 2));
      
      // Tratar erros espec√≠ficos
      if (error.code === 4001) {
        console.log("‚ùå Usu√°rio rejeitou a conex√£o inicial");
        toast({
          title: "‚ùå Conex√£o cancelada",
          description: "Voc√™ cancelou a conex√£o. Para acessar zkSync Sepolia, aceite no MetaMask.",
          variant: "destructive",
        });
      } else if (error.code === -32002) {
        console.log("‚è≥ Solicita√ß√£o pendente no MetaMask");
        toast({
          title: "‚è≥ Solicita√ß√£o pendente",
          description: "J√° existe uma solicita√ß√£o aberta no MetaMask. Verifique a extens√£o.",
          variant: "destructive",
        });
      } else if (error.code === -32603) {
        console.log("üîß Erro interno do MetaMask");
        toast({
          title: "üîß Erro interno",
          description: "Erro interno do MetaMask. Tente recarregar a p√°gina.",
          variant: "destructive",
        });
      } else {
        console.log("‚ùå Erro n√£o categorizado:", error.message);
        toast({
          title: "‚ùå Erro de conex√£o",
          description: `${error.message || "Erro desconhecido. Verifique se o MetaMask est√° funcionando."}\nC√≥digo: ${error.code || "N/A"}`,
          variant: "destructive",
        });
      }
    }
  };

  const connectSolanaWallet = async () => {
    if (typeof window !== "undefined" && window.solana) {
      try {
        const response = await window.solana.connect();
        const publicKey = response.publicKey.toString();
        setAddress(publicKey);
        setConnected(true);
        setWalletType("solana");
        
        // Store connection info
        localStorage.setItem('walletConnection', JSON.stringify({
          address: publicKey,
          walletType: 'solana'
        }));
        
        toast({
          title: "Carteira Solana conectada",
          description: `Endere√ßo: ${publicKey.slice(0, 6)}...${publicKey.slice(-4)}`,
        });
      } catch (error) {
        toast({
          title: "Erro ao conectar carteira Solana",
          description: "Por favor, tente novamente.",
          variant: "destructive",
        });
      }
    } else {
      toast({
        title: "Phantom n√£o encontrada",
        description: "Por favor, instale a Phantom para continuar.",
        variant: "destructive",
      });
    }
  };

  const handleDisconnect = () => {
    console.log("üîå Desconectando carteira...");
    disconnect();
    localStorage.removeItem('walletConnection');
    console.log("‚úÖ Carteira desconectada e localStorage limpo");
    toast({
      title: "‚úÖ Carteira desconectada",
      description: "Sua carteira foi desconectada com sucesso.",
    });
  };

  if (isConnected && address) {
    return (
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button variant="outline" className="border-blue-600 text-blue-600 hover:bg-blue-50">
            {`${address.slice(0, 6)}...${address.slice(-4)}`}
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent>
          <DropdownMenuItem onClick={() => navigator.clipboard.writeText(address)}>
            Copiar endere√ßo
          </DropdownMenuItem>
          <DropdownMenuItem onClick={handleDisconnect}>
            Desconectar
          </DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>
    );
  }

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button className="bg-blue-600 hover:bg-blue-700">
          Conectar Carteira
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent>
        <DropdownMenuItem onClick={connectEthereumWallet}>
          MetaMask (zkSync Sepolia)
        </DropdownMenuItem>
        <DropdownMenuItem onClick={connectSolanaWallet}>
          Phantom (Solana)
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}
