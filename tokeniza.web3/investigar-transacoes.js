// Script para investigar transa√ß√µes na zkSync Sepolia
// Execute no console do navegador na p√°gina da aplica√ß√£o

console.log('üîç Investigando transa√ß√µes zkSync Sepolia...');

// Configura√ß√µes
const SENDER_ADDRESS = "0xAD4E323F0996f34b9896b8b1c557B27B0bd33BD3";
const RECEIVER_ADDRESS = "0xa3d5737c037981F02275eD1f4a1dde3b3577355c";

// Fun√ß√£o para verificar saldo
async function checkBalance(address, label) {
  try {
    const provider = new ethers.BrowserProvider(window.ethereum);
    const balance = await provider.getBalance(address);
    console.log(`üí∞ Saldo ${label} (${address}):`, ethers.formatEther(balance), 'ETH');
    return balance;
  } catch (error) {
    console.error(`‚ùå Erro ao verificar saldo ${label}:`, error);
    return null;
  }
}

// Fun√ß√£o para investigar transa√ß√£o espec√≠fica
async function investigateTransaction(txHash) {
  try {
    console.log(`üîç Investigando transa√ß√£o: ${txHash}`);
    
    const provider = new ethers.BrowserProvider(window.ethereum);
    
    // Obter detalhes da transa√ß√£o
    const tx = await provider.getTransaction(txHash);
    console.log('üìù Detalhes da transa√ß√£o:', {
      hash: tx.hash,
      from: tx.from,
      to: tx.to,
      value: ethers.formatEther(tx.value),
      gasLimit: tx.gasLimit.toString(),
      gasPrice: tx.gasPrice ? ethers.formatUnits(tx.gasPrice, 'gwei') + ' gwei' : 'N/A'
    });
    
    // Obter receipt da transa√ß√£o
    const receipt = await provider.getTransactionReceipt(txHash);
    if (receipt) {
      console.log('üìã Receipt da transa√ß√£o:', {
        status: receipt.status === 1 ? 'SUCCESS' : 'FAILED',
        blockNumber: receipt.blockNumber,
        gasUsed: receipt.gasUsed.toString(),
        effectiveGasPrice: receipt.gasPrice ? ethers.formatUnits(receipt.gasPrice, 'gwei') + ' gwei' : 'N/A',
        logs: receipt.logs.length + ' eventos'
      });
      
      // Verificar se h√° logs de transfer√™ncia
      if (receipt.logs.length > 0) {
        console.log('üìä Logs da transa√ß√£o:', receipt.logs);
      }
    }
    
    return { tx, receipt };
  } catch (error) {
    console.error(`‚ùå Erro ao investigar transa√ß√£o ${txHash}:`, error);
    return null;
  }
}

// Executar investiga√ß√£o
async function runInvestigation() {
  console.log('üöÄ Iniciando investiga√ß√£o...');
  
  // Verificar saldos atuais
  await checkBalance(SENDER_ADDRESS, 'Remetente');
  await checkBalance(RECEIVER_ADDRESS, 'Destinat√°rio');
  
  // Investigar transa√ß√µes espec√≠ficas (substitua pelos hashes reais)
  const transactionHashes = [
    // Adicione aqui os hashes das transa√ß√µes que voc√™ quer investigar
    // Exemplo: "0x1234567890abcdef..."
  ];
  
  for (const hash of transactionHashes) {
    await investigateTransaction(hash);
    console.log('---');
  }
  
  // Verificar configura√ß√£o atual
  console.log('‚öôÔ∏è Configura√ß√£o atual:', {
    ACCESS_FEE_ETH: "0.000005",
    PLATFORM_WALLET_ADDRESS: "0xa3d5737c037981F02275eD1f4a1dde3b3577355c",
    CHAIN_ID: 300,
    NETWORK: "zkSync Sepolia"
  });
}

// Executar
runInvestigation();

// Fun√ß√£o auxiliar para verificar se endere√ßo est√° ativado na zkSync
async function checkAccountActivation(address) {
  try {
    const provider = new ethers.BrowserProvider(window.ethereum);
    const nonce = await provider.getTransactionCount(address);
    const balance = await provider.getBalance(address);
    const code = await provider.getCode(address);
    
    console.log(`üîç Status da conta ${address}:`, {
      nonce,
      balance: ethers.formatEther(balance),
      hasCode: code !== '0x',
      isActivated: nonce > 0 || balance > 0 || code !== '0x'
    });
  } catch (error) {
    console.error(`‚ùå Erro ao verificar conta ${address}:`, error);
  }
}

// Verificar ambas as contas
checkAccountActivation(SENDER_ADDRESS);
checkAccountActivation(RECEIVER_ADDRESS);
